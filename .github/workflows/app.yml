name: Course CI & CD
on:
  push:
    paths:
      - 'services/course/**'
      - '.github/workflows/course.yml'
    branches:
      - 'develop-course'
      - 'release-course'
  pull_request:
    paths:
      - 'services/course/**'
      - '.github/workflows/course.yml'
    branches:
      - 'develop'
      - 'develop-course'
      - '!release-course'

env:
  SERVICE_NAME: course
  BRANCH: ${GITHUB_REF##*/}
  IMAGE_TAG: ${GITHUB_REF##*/}_${GITHUB_SHA::6}
  DEVELOP_HELM_CHART_NAME: dev
  RELEASE_HELM_CHART_NAME: release

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.USER_CHECKOUT_TOKEN }}

      - name: Setup
        run: |
          git config --global --add url."https://${{ secrets.USER_CHECKOUT_TOKEN }}:x-oauth-basic@github.com/".insteadOf "https://github.com/"

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.19.x'

      - name: Run Test
        run: |
          cd services/${{ env.SERVICE_NAME }}
          make entgo
          make test

  build:
    needs: [test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop-course' || github.ref == 'refs/heads/release-course'
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.USER_CHECKOUT_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Start build
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: lms/${{ env.SERVICE_NAME }}
        run: |
          cd services/${SERVICE_NAME}
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest --build-arg authtoken=${{  secrets.USER_CHECKOUT_TOKEN  }} . -f Dockerfile

      - name: Tagging
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: lms/${{ env.SERVICE_NAME }}
        run: docker tag $ECR_REGISTRY/$ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:${{  env.IMAGE_TAG  }}

      - name: Push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: lms/${{ env.SERVICE_NAME }}
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{  env.IMAGE_TAG  }}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  develop-deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop-course'
    steps:
      - name: Deploy
        run: |
          mkdir temp && cd temp
          git config --global user.email csk6124@gmail.com
          git config --global user.name csk6124

          git clone "https://csk6124:${{ secrets.USER_CHECKOUT_TOKEN }}@github.com/LUXROBO/LMS-backend-helm-charts.git"
          cd LMS-backend-helm-charts

          mkdir -p dist/${{  env.SERVICE_NAME  }}/${{ env.DEVELOP_HELM_CHART_NAME }}/
          helm lint charts/${{  env.SERVICE_NAME  }}/${{ env.DEVELOP_HELM_CHART_NAME }}/
          helm template --set image.tag=${{  env.IMAGE_TAG  }} -f charts/${{  env.SERVICE_NAME  }}/${{ env.DEVELOP_HELM_CHART_NAME }}/values.yaml charts/${{  env.SERVICE_NAME  }}/${{ env.DEVELOP_HELM_CHART_NAME }}/ > dist/${{  env.SERVICE_NAME  }}/${{ env.DEVELOP_HELM_CHART_NAME }}/out.yaml

          git add --all
          git commit -m "chore: Build update commit success"
          git push origin master --force

      - name: Action-slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()

  release-deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/release-course'
    steps:
      - name: Deploy
        run: |
          mkdir temp && cd temp
          git config --global user.email csk6124@gmail.com
          git config --global user.name csk6124

          git clone "https://csk6124:${{ secrets.USER_CHECKOUT_TOKEN }}@github.com/LUXROBO/LMS-backend-helm-charts.git"
          cd LMS-backend-helm-charts

          mkdir -p dist/${{  env.SERVICE_NAME  }}/${{ env.RELEASE_HELM_CHART_NAME }}/
          helm lint charts/${{  env.SERVICE_NAME  }}/${{ env.RELEASE_HELM_CHART_NAME }}/
          helm template --set image.tag=${{  env.IMAGE_TAG  }} -f charts/${{  env.SERVICE_NAME  }}/${{ env.RELEASE_HELM_CHART_NAME }}/values.yaml charts/${{  env.SERVICE_NAME  }}/${{ env.RELEASE_HELM_CHART_NAME }}/ > dist/${{  env.SERVICE_NAME  }}/${{ env.RELEASE_HELM_CHART_NAME }}/out.yaml          

          git add --all
          git commit -m "chore: Build update commit success"

      - name: Action-slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()

